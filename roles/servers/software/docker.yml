# Load distro-specific variables
# based of and edited for Ubuntu 20.04
# https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-install-and-set-up-docker-on-ubuntu-18-04
- include_vars: "{{ ansible_distribution }}.yml"

# Install aptitude package tool
#- name: Install aptitude using apt
#  apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

# Install docker dependencies 
- name: Software | Docker | Install required system packages for Docker
  apt: name={{ item }} state=latest update_cache=yes
  loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true

# Add Dockerâ€™s official GPG key
- name: Software | Docker | Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true

# Set up the official stable repository of Docker
- name: Software | Docker | Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu focal stable
    state: present
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true

# Install docker Engine
- name: Software | Docker | Update apt and install docker-ce & docker-ce-cli & ontainerd.io
#  apt: update_cache=yes name=docker-ce name=docker-ce-cli name=containerd.io state=latest
  apt: name={{ item }} state=latest update_cache=yes
  loop: [ 'ocker-ce', 'ocker-ce-cli', 'ontainerd.io']
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true

# Add the docker mudule so that ansible can manage Docker
- name: Software | Docker | Install Docker Module for Python
  pip:
    name: docker
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true

# Set up default container (Ubuntu)
- name: Software | Docker | Pull default Docker image for management with Ansible
  docker_image:
    name: "{{ default_container_image }}"
    source: pull
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true
    - docker_default_container == true

# Creates the number of containers defined by the variable create_containers, using values from vars file
- name: Software | Docker | Create default containers
  docker_container:
    name: "{{ docker_default_container_name }}{{ item }}"
    image: "{{ docker_default_container_image }}"
    command: "{{ docker_default_container_command }}"
    state: present
  with_sequence: count={{ docker_create_containers }}
  when: 
    - ansible_distribution == "Ubuntu"
    - docker is defined
    - docker == true
    - docker_default_container == true